{
	"info": {
		"_postman_id": "cc67d01b-0bab-4844-9fb0-db53cc8ec620",
		"name": "Calorie Guide server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "Register",
					"item": [
						{
							"name": "Register with 201 response",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$guid}}\",\r\n    \"password\": \"Pass123*\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with 201 response and optional fields",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$guid}}\",\r\n    \"password\": \"Pass123*\",\r\n    \"firstName\": \"Filip\",\r\n    \"lastName\": \"Milanko\",\r\n    \"gender\": \"male\",\r\n    \"birthday\": 722300400000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with 409 response for already registered username",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: 'FilipMilanko',\r",
											"    password: 'Pass123*'\r",
											"}\r",
											"\r",
											"pm.variables.set('body', JSON.stringify(body))\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with 400 response for invalid body format",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$guid}}\",,\r\n    \"password\": \"Pass123*\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with 400 response for no username",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"Pass123*\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with 400 response for no password",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$guid}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with 400 response for invalid first name",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$guid}}\",\r\n    \"password\": \"Pass123!\",\r\n    \"firstName\": 123\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with 400 response for invalid last name",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$guid}}\",\r\n    \"password\": \"Pass123!\",\r\n    \"lastName\": 123\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with 400 response for invalid gender",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$guid}}\",\r\n    \"password\": \"Pass123!\",\r\n    \"gender\": \"lamp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with 400 response for invalid birthday",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$guid}}\",\r\n    \"password\": \"Pass123!\",\r\n    \"birthday\": -1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Login with 200 response",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: 'FilipMilanko',\r",
											"    password: 'Pass123*',\r",
											"    \"firstName\": \"Filip\",\r",
											"    \"lastName\": \"Milanko\",\r",
											"    \"gender\": \"male\",\r",
											"    \"birthday\": 722300400000\r",
											"}\r",
											"\r",
											"pm.variables.set('body', JSON.stringify(body))\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json()\r",
											"pm.environment.set('token', body.token)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with 400 response for username not found Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$guid}}\",\r\n    \"password\": \"Pass123*\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with 400 response for invalid body format",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$guid}}\",,\r\n    \"password\": \"Pass123*\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with 400 response for no username",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"Pass123*\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with 400 response for no password",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$guid}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with 401 response for incorrect password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: 'FilipMilanko',\r",
											"    password: 'Pass123*'\r",
											"}\r",
											"\r",
											"pm.variables.set('username', body.username)\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"Pas123*\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User API",
			"item": [
				{
					"name": "Update",
					"item": [
						{
							"name": "Update user password with 200 response",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const { v4: uuidv4 } = require('uuid')\r",
											"\r",
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: uuidv4(),\r",
											"    password: 'Pass123*'\r",
											"}\r",
											"\r",
											"pm.variables.set('username', body.username)\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"Password123*\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user role with 200 response",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const { v4: uuidv4 } = require('uuid')\r",
											"\r",
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: uuidv4(),\r",
											"    password: 'Pass123*'\r",
											"}\r",
											"\r",
											"pm.variables.set('username', body.username)\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"role\": \"user_manager\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user fist name with 200 response",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const { v4: uuidv4 } = require('uuid')\r",
											"\r",
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: uuidv4(),\r",
											"    password: 'Pass123*'\r",
											"}\r",
											"\r",
											"pm.variables.set('username', body.username)\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"Filip\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user last name with 200 respons",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const { v4: uuidv4 } = require('uuid')\r",
											"\r",
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: uuidv4(),\r",
											"    password: 'Pass123*'\r",
											"}\r",
											"\r",
											"pm.variables.set('username', body.username)\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastName\": \"Milanko\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user gender with 200 respons",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const { v4: uuidv4 } = require('uuid')\r",
											"\r",
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: uuidv4(),\r",
											"    password: 'Pass123*'\r",
											"}\r",
											"\r",
											"pm.variables.set('username', body.username)\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"gender\": \"male\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user birthday with 200 respons",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const { v4: uuidv4 } = require('uuid')\r",
											"\r",
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: uuidv4(),\r",
											"    password: 'Pass123*'\r",
											"}\r",
											"\r",
											"pm.variables.set('username', body.username)\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"birthday\": 722300400000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user with 400 response for invalid password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const { v4: uuidv4 } = require('uuid')\r",
											"\r",
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: uuidv4(),\r",
											"    password: 'Pass123*'\r",
											"}\r",
											"\r",
											"pm.variables.set('username', body.username)\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"Password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user with 400 response for invalid role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const { v4: uuidv4 } = require('uuid')\r",
											"\r",
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: uuidv4(),\r",
											"    password: 'Pass123*'\r",
											"}\r",
											"\r",
											"pm.variables.set('username', body.username)\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"role\": \"super_admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user with 400 response for invalid first name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const { v4: uuidv4 } = require('uuid')\r",
											"\r",
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: uuidv4(),\r",
											"    password: 'Pass123*'\r",
											"}\r",
											"\r",
											"pm.variables.set('username', body.username)\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": 123\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user with 400 response for invalid last name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const { v4: uuidv4 } = require('uuid')\r",
											"\r",
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: uuidv4(),\r",
											"    password: 'Pass123*'\r",
											"}\r",
											"\r",
											"pm.variables.set('username', body.username)\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastName\": 123\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user with 400 response for invalid gender",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const { v4: uuidv4 } = require('uuid')\r",
											"\r",
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: uuidv4(),\r",
											"    password: 'Pass123*'\r",
											"}\r",
											"\r",
											"pm.variables.set('username', body.username)\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"gender\": \"lamp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user with 400 response for invalid birthday",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const { v4: uuidv4 } = require('uuid')\r",
											"\r",
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: uuidv4(),\r",
											"    password: 'Pass123*'\r",
											"}\r",
											"\r",
											"pm.variables.set('username', body.username)\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"birthday\": -1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user with 400 response no update fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const { v4: uuidv4 } = require('uuid')\r",
											"\r",
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: uuidv4(),\r",
											"    password: 'Pass123*'\r",
											"}\r",
											"\r",
											"pm.variables.set('username', body.username)\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user with 404 response for user not found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"Password123*\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{$guid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{$guid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "Delete user with 200 response",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const { v4: uuidv4 } = require('uuid')\r",
											"\r",
											"const registerUrl = pm.environment.get('host') + '/register'\r",
											"\r",
											"const body = {\r",
											"    username: uuidv4(),\r",
											"    password: 'Pass123*'\r",
											"}\r",
											"\r",
											"pm.variables.set('username', body.username)\r",
											"\r",
											"const registerUserRequest = {\r",
											"    url: registerUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(registerUserRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{username}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user with 404 response for not found user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{$guid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{$guid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get all users",
					"item": [
						{
							"name": "Get all user with 200 response",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Food API",
			"item": [
				{
					"name": "Add",
					"item": [
						{
							"name": "Add food with 201 response",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"FilipMilanko\",\r\n    \"name\": \"Pizza\",\r\n    \"timestamp\": 1644326856153,\r\n    \"calories\": 430\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food",
									"host": [
										"{{host}}"
									],
									"path": [
										"food"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add food with 201 response without username",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Pizza\",\r\n    \"timestamp\": 1644326856153,\r\n    \"calories\": 430\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food",
									"host": [
										"{{host}}"
									],
									"path": [
										"food"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add food with 400 response for invalid body format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"FilipMilanko\",,\r\n    \"name\": \"Pizza\",\r\n    \"timestamp\": 1644326856153,\r\n    \"calories\": 430\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food",
									"host": [
										"{{host}}"
									],
									"path": [
										"food"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add food with 400 response for no name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"FilipMilanko\",\r\n    \"timestamp\": 1644326856153,\r\n    \"calories\": 430\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food",
									"host": [
										"{{host}}"
									],
									"path": [
										"food"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add food with 400 response for no timestamp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"FilipMilanko\",\r\n    \"name\": \"Pizza\",\r\n    \"calories\": 430\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food",
									"host": [
										"{{host}}"
									],
									"path": [
										"food"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add food with 400 response for invalid timestamp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"FilipMilanko\",\r\n    \"name\": \"Pizza\",\r\n    \"timestamp\": \"1644326856153\",\r\n    \"calories\": 430\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food",
									"host": [
										"{{host}}"
									],
									"path": [
										"food"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add food with 400 response for no calories",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"FilipMilanko\",\r\n    \"name\": \"Pizza\",\r\n    \"timestamp\": 1644326856153\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food",
									"host": [
										"{{host}}"
									],
									"path": [
										"food"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add food with 400 response for invalid calories",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"FilipMilanko\",\r\n    \"name\": \"Pizza\",\r\n    \"timestamp\": 1644326856153,\r\n    \"calories\": -430\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food",
									"host": [
										"{{host}}"
									],
									"path": [
										"food"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update",
					"item": [
						{
							"name": "Update food with 200 response",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const addFoodUrl = pm.environment.get('host') + '/food'\r",
											"const token = pm.environment.get('token')\r",
											"\r",
											"const body = {\r",
											"    \"username\": \"FilipMilanko\",\r",
											"    \"name\": \"Pizza\",\r",
											"    \"timestamp\": 1644326856153,\r",
											"    \"calories\": 430\r",
											"}\r",
											"\r",
											"const addFoodRequest = {\r",
											"    url: addFoodUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${token}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(addFoodRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"        pm.variables.set('id', result.json().id)\r",
											"    }\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Burger\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"food",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update food with 404 response for not found food entry",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Burger\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food/{{$guid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"food",
										"{{$guid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "Delete food with 200 response",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const addFoodUrl = pm.environment.get('host') + '/food'\r",
											"const token = pm.environment.get('token')\r",
											"\r",
											"const body = {\r",
											"    \"username\": \"FilipMilanko\",\r",
											"    \"name\": \"Pizza\",\r",
											"    \"timestamp\": 1644326856153,\r",
											"    \"calories\": 430\r",
											"}\r",
											"\r",
											"const addFoodRequest = {\r",
											"    url: addFoodUrl,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${token}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(body)\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(addFoodRequest, (error, result) => {\r",
											"    if (error) {\r",
											"        console.log(error)\r",
											"    } else {\r",
											"        console.log(result)\r",
											"        pm.variables.set('id', result.json().id)\r",
											"    }\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food/{{id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"food",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete food with 404 response for not found food entry",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food/{{$guid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"food",
										"{{$guid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get food list",
					"item": [
						{
							"name": "Get user's food list",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const addFoodUrl = pm.environment.get('host') + '/food'\r",
											"const token = pm.environment.get('token')\r",
											"\r",
											"const foodEntry1 = {\r",
											"    \"username\": \"FilipMilanko\",\r",
											"    \"name\": \"Pizza\",\r",
											"    \"timestamp\": 1644326856000,\r",
											"    \"calories\": 430\r",
											"}\r",
											"\r",
											"const foodEntry2 = {\r",
											"    \"username\": \"FilipMilanko\",\r",
											"    \"name\": \"Burger\",\r",
											"    \"timestamp\": 1644326857000,\r",
											"    \"calories\": 500\r",
											"}\r",
											"\r",
											"const foodEntry3 = {\r",
											"    \"username\": \"FilipMilanko\",\r",
											"    \"name\": \"Apple\",\r",
											"    \"timestamp\": 1644326858000,\r",
											"    \"calories\": 52\r",
											"}\r",
											"\r",
											"const foodList = [foodEntry1, foodEntry2, foodEntry3]\r",
											"\r",
											"function getAddFoodRequest(foodEntry) {\r",
											"    return {\r",
											"        url: addFoodUrl,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': `Bearer ${token}`\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(foodEntry)\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"for (const foodEntry of foodList) {\r",
											"    pm.sendRequest(getAddFoodRequest(foodEntry), (error, result) => {\r",
											"        if (error) {\r",
											"            console.log(error)\r",
											"        } else {\r",
											"            console.log(result)\r",
											"            pm.variables.set('id', result.json().id)\r",
											"        }\r",
											"    })\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food",
									"host": [
										"{{host}}"
									],
									"path": [
										"food"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user's food list with from parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const addFoodUrl = pm.environment.get('host') + '/food'\r",
											"const token = pm.environment.get('token')\r",
											"\r",
											"const foodEntry1 = {\r",
											"    \"username\": \"FilipMilanko\",\r",
											"    \"name\": \"Pizza\",\r",
											"    \"timestamp\": 1644326856000,\r",
											"    \"calories\": 430\r",
											"}\r",
											"\r",
											"const foodEntry2 = {\r",
											"    \"username\": \"FilipMilanko\",\r",
											"    \"name\": \"Burger\",\r",
											"    \"timestamp\": 1644326857000,\r",
											"    \"calories\": 500\r",
											"}\r",
											"\r",
											"const foodEntry3 = {\r",
											"    \"username\": \"FilipMilanko\",\r",
											"    \"name\": \"Apple\",\r",
											"    \"timestamp\": 1644326858000,\r",
											"    \"calories\": 52\r",
											"}\r",
											"\r",
											"const foodList = [foodEntry1, foodEntry2, foodEntry3]\r",
											"\r",
											"function getAddFoodRequest(foodEntry) {\r",
											"    return {\r",
											"        url: addFoodUrl,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': `Bearer ${token}`\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(foodEntry)\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"for (const foodEntry of foodList) {\r",
											"    pm.sendRequest(getAddFoodRequest(foodEntry), (error, result) => {\r",
											"        if (error) {\r",
											"            console.log(error)\r",
											"        } else {\r",
											"            console.log(result)\r",
											"            pm.variables.set('id', result.json().id)\r",
											"        }\r",
											"    })\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food?from=1644326857000",
									"host": [
										"{{host}}"
									],
									"path": [
										"food"
									],
									"query": [
										{
											"key": "from",
											"value": "1644326857000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user's food list with to parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const addFoodUrl = pm.environment.get('host') + '/food'\r",
											"const token = pm.environment.get('token')\r",
											"\r",
											"const foodEntry1 = {\r",
											"    \"username\": \"FilipMilanko\",\r",
											"    \"name\": \"Pizza\",\r",
											"    \"timestamp\": 1644326856000,\r",
											"    \"calories\": 430\r",
											"}\r",
											"\r",
											"const foodEntry2 = {\r",
											"    \"username\": \"FilipMilanko\",\r",
											"    \"name\": \"Burger\",\r",
											"    \"timestamp\": 1644326857000,\r",
											"    \"calories\": 500\r",
											"}\r",
											"\r",
											"const foodEntry3 = {\r",
											"    \"username\": \"FilipMilanko\",\r",
											"    \"name\": \"Apple\",\r",
											"    \"timestamp\": 1644326858000,\r",
											"    \"calories\": 52\r",
											"}\r",
											"\r",
											"const foodList = [foodEntry1, foodEntry2, foodEntry3]\r",
											"\r",
											"function getAddFoodRequest(foodEntry) {\r",
											"    return {\r",
											"        url: addFoodUrl,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': `Bearer ${token}`\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(foodEntry)\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"for (const foodEntry of foodList) {\r",
											"    pm.sendRequest(getAddFoodRequest(foodEntry), (error, result) => {\r",
											"        if (error) {\r",
											"            console.log(error)\r",
											"        } else {\r",
											"            console.log(result)\r",
											"            pm.variables.set('id', result.json().id)\r",
											"        }\r",
											"    })\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food?to=1644326858000",
									"host": [
										"{{host}}"
									],
									"path": [
										"food"
									],
									"query": [
										{
											"key": "to",
											"value": "1644326858000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user's food list with from and to parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const addFoodUrl = pm.environment.get('host') + '/food'\r",
											"const token = pm.environment.get('token')\r",
											"\r",
											"const foodEntry1 = {\r",
											"    \"username\": \"FilipMilanko\",\r",
											"    \"name\": \"Pizza\",\r",
											"    \"timestamp\": 1644326856000,\r",
											"    \"calories\": 430\r",
											"}\r",
											"\r",
											"const foodEntry2 = {\r",
											"    \"username\": \"FilipMilanko\",\r",
											"    \"name\": \"Burger\",\r",
											"    \"timestamp\": 1644326857000,\r",
											"    \"calories\": 500\r",
											"}\r",
											"\r",
											"const foodEntry3 = {\r",
											"    \"username\": \"FilipMilanko\",\r",
											"    \"name\": \"Apple\",\r",
											"    \"timestamp\": 1644326858000,\r",
											"    \"calories\": 52\r",
											"}\r",
											"\r",
											"const foodList = [foodEntry1, foodEntry2, foodEntry3]\r",
											"\r",
											"function getAddFoodRequest(foodEntry) {\r",
											"    return {\r",
											"        url: addFoodUrl,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': `Bearer ${token}`\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(foodEntry)\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"for (const foodEntry of foodList) {\r",
											"    pm.sendRequest(getAddFoodRequest(foodEntry), (error, result) => {\r",
											"        if (error) {\r",
											"            console.log(error)\r",
											"        } else {\r",
											"            console.log(result)\r",
											"            pm.variables.set('id', result.json().id)\r",
											"        }\r",
											"    })\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food?from=1644326857000&to=1644326858000",
									"host": [
										"{{host}}"
									],
									"path": [
										"food"
									],
									"query": [
										{
											"key": "from",
											"value": "1644326857000"
										},
										{
											"key": "to",
											"value": "1644326858000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user's food list for another user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/food?username=MilankoFilip",
									"host": [
										"{{host}}"
									],
									"path": [
										"food"
									],
									"query": [
										{
											"key": "username",
											"value": "MilankoFilip"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Report API",
			"item": [
				{
					"name": "Get food entry count",
					"item": [
						{
							"name": "Get food entry count with 200 response",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/report/food/count",
									"host": [
										"{{host}}"
									],
									"path": [
										"report",
										"food",
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get food entry count with 200 response from specific period",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/report/food/count?from=1644326857000&to=1644326858000",
									"host": [
										"{{host}}"
									],
									"path": [
										"report",
										"food",
										"count"
									],
									"query": [
										{
											"key": "from",
											"value": "1644326857000"
										},
										{
											"key": "to",
											"value": "1644326858000"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}